%YAML 1.1
---

default-log-dir: /var/log/suricata
default-rule-path: /etc/suricata/rules

listenmode: nfqueue

vars:
  address-groups:
    HOME_NET: "[192.168.22.0/24, 192.167.22.0/24]"
    EXTERNAL_NET: "!$HOME_NET"

outputs:
  - console:
      enabled: no
  - fast:
      enabled: yes
      filename: fast.log
      append: yes
      type: file
      types:
        - alert:
            enabled: yes
            filename: fast.log
            append: yes
  - eve-log:
      enabled: yes
      append: yes
      filetype: regular
      filename: eve.json
      types:
        - alert:
            enabled: yes
            filename: eve.json
            append: yes
            payload-printable: yes
            payload: yes
        - flow:
            enabled: yes
            filename: eve.json
            append: yes
            payload-printable: yes
            payload: yes
  - tcp-data:
      enabled: yes
      append: yes
      filename: tcp-data.log
      type: file
      types:
        - alert:
            enabled: yes
            filename: tcp-data.log
            append: yes

community-id: true
community-id-seed: 0

af-packet:
  - interface: br-android

defrag:
  memcap: 67108864

stream:
  memcap: 67108864

http:
  memcap: 67108864

decoder:
  events:
    - ssh
    - dns
    - http
    - tls

rule-files:
  - suricata.rules


# Stream engine settings. Here the TCP stream tracking and reassembly
# engine is configured.
#
# stream:
#   memcap: 32mb                # Can be specified in kb, mb, gb.  Just a
#                               # number indicates it's in bytes.
#   checksum-validation: yes    # To validate the checksum of received
#                               # packet. If csum validation is specified as
#                               # "yes", then packet with invalid csum will not
#                               # be processed by the engine stream/app layer.
#                               # Warning: locally generated trafic can be
#                               # generated without checksum due to hardware offload
#                               # of checksum. You can control the handling of checksum
#                               # on a per-interface basis via the 'checksum-checks'
#                               # option
#   prealloc-sessions: 2k       # 2k sessions prealloc'd per stream thread
#   midstream: false            # don't allow midstream session pickups
#   async-oneside: false        # don't enable async stream handling
#   inline: no                  # stream inline mode
#   drop-invalid: yes           # in inline mode, drop packets that are invalid with regards to streaming engine
#   max-synack-queued: 5        # Max different SYN/ACKs to queue
#   bypass: no                  # Bypass packets when stream.depth is reached
#
#   reassembly:
#     memcap: 64mb              # Can be specified in kb, mb, gb.  Just a number
#                               # indicates it's in bytes.
#     depth: 1mb                # Can be specified in kb, mb, gb.  Just a number
#                               # indicates it's in bytes.
#     toserver-chunk-size: 2560 # inspect raw stream in chunks of at least
#                               # this size.  Can be specified in kb, mb,
#                               # gb.  Just a number indicates it's in bytes.
#     toclient-chunk-size: 2560 # inspect raw stream in chunks of at least
#                               # this size.  Can be specified in kb, mb,
#                               # gb.  Just a number indicates it's in bytes.
#     randomize-chunk-size: yes # Take a random value for chunk size around the specified value.
#                               # This lower the risk of some evasion technics but could lead
#                               # detection change between runs. It is set to 'yes' by default.
#     randomize-chunk-range: 10 # If randomize-chunk-size is active, the value of chunk-size is
#                               # a random value between (1 - randomize-chunk-range/100)*toserver-chunk-size
#                               # and (1 + randomize-chunk-range/100)*toserver-chunk-size and the same
#                               # calculation for toclient-chunk-size.
#                               # Default value of randomize-chunk-range is 10.
#
#     raw: yes                  # 'Raw' reassembly enabled or disabled.
#                               # raw is for content inspection by detection
#                               # engine.
#
#     segment-prealloc: 2048    # number of segments preallocated per thread
#
#     check-overlap-different-data: true|false
#                               # check if a segment contains different data
#                               # than what we've already seen for that
#                               # position in the stream.
#                               # This is enabled automatically if inline mode
#                               # is used or when stream-event:reassembly_overlap_different_data;
#                               # is used in a rule.
#
# stream:
#   memcap: 512mb
#   checksum-validation: yes      # reject wrong csums
#   inline: auto                  # auto will use inline mode in IPS mode, yes or no set it statically
#   reassembly:
#     memcap: 256mb
#     depth: 1mb                  # reassemble 1mb into a stream
#     toserver-chunk-size: 9999
#     toclient-chunk-size: 9999
#     randomize-chunk-size: yes
#     #randomize-chunk-range: 10
#     raw: yes
#     #segment-prealloc: 2048
#     #check-overlap-different-data: true